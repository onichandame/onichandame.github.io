{"componentChunkName":"component---src-template-blog-tsx","path":"/post/react-native","result":{"data":{"mdx":{"frontmatter":{"title":"React Native Development","author":"onichandame","date":"2021-01-16T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Native Development\",\n  \"author\": \"onichandame\",\n  \"date\": \"2021-01-16T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#solved-problems\"\n  }, \"Solved Problems\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#code-re-use-across-android-ios-web\"\n  }, \"Code Re-use across Android-iOS-Web\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#light-weight-development-environmentexpo\"\n  }, \"Light-weight Development Environment(Expo)\"))))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactnative.dev/\"\n  }, \"React Native(RN)\"), \" is a cross-platform development tool that endeavours the ideal \\\"write once and run everywhere\\\". Here records my experiences in learning RN.\"), mdx(\"h1\", null, \"Solved Problems\"), mdx(\"p\", null, \"This section exclusively records what I have learnt that \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactnative.dev/\"\n  }, \"RN\"), \" can solve.\"), mdx(\"h2\", null, \"Code Re-use across Android-iOS-Web\"), mdx(\"p\", null, \"The basic functionality of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactnative.dev/\"\n  }, \"RN\"), \" is to reuse codes in the same app built for different platforms. The basic syntax for the cross-platform codes is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/introducing-jsx.html\"\n  }, \"JSX\"), \".\"), mdx(\"h2\", null, \"Light-weight Development Environment(Expo)\"), mdx(\"p\", null, \"If all the build processes are run locally, an enormous amount of toolchains are required to be installed locally, e.g. Android/iOS SDK. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.expo.io/\"\n  }, \"Expo\"), \" is a generous platform that allows everyone to build apps without a complete local environment. The most useful commands are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"expo build:android\"), \": can also build ios app and web bundles\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"expo start:web\"), \": can also start development server for android and iOS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"note 1: I usually use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expo start:web -m tunnel\"), \" as I believe that the tunnel mode allows the server to be masked by forward proxies\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"note 2: To run the web server on a custom port, set the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WEB_PORT\"), \" to the desired port. to the desired port.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Solved Problems","depth":1},{"value":"Code Re-use across Android-iOS-Web","depth":2},{"value":"Light-weight Development Environment(Expo)","depth":2}]}},"pageContext":{"locale":"en","type":"post","title":"React Native Development","date":"2021-01-16T00:00:00.000Z","author":"onichandame"}},"staticQueryHashes":["440568431","840944156","899237799","899237799"]}