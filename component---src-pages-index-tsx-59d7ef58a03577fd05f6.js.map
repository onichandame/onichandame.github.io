{"version":3,"sources":["webpack:///./src/utils/dateFormat.ts","webpack:///./src/components/Blog/Entry.tsx","webpack:///./src/components/Blog/BlogList.tsx","webpack:///./src/pages/index.tsx"],"names":["dateFormat","date","Date","getFullYear","getMonth","getDate","Entry","title","author","Grid","container","direction","item","Typography","variant","justify","BlogList","posts","locale","useContext","LocaleContext","List","map","slug","other","ListItem","button","onClick","navigate","localize","IndexPage","allMdx","data","useTranslation","greeting","more","spacing","alignItems","align","edges","post","node","frontmatter","parent","relativeDirectory","to","query"],"mappings":"+HAEO,IAAMA,EAAa,SAACC,GAEzB,OADAA,EAAO,IAAIC,KAAKD,IACDE,cAAf,KAAgCF,EAAKG,WAAa,GAAlD,IAAuDH,EAAKI,Y,yNCOjDC,EAAmB,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQP,EAAW,EAAXA,KAChD,OACE,kBAACQ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,UACzB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAS,MAAOP,IAE9B,kBAACE,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,MAAOI,QAAS,iBACzC,kBAACN,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAS,aAAcN,IAErC,kBAACC,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAS,aAAcd,YAAWC,SCbnD,IAAMe,EAAsB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAC9BC,EAASC,qBAAWC,KAC1B,OACE,kBAACC,EAAA,EAAD,KACGJ,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,KAASC,E,oIAAZ,oBACT,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,kBAAMC,mBAASC,YAASX,EAAD,SAAkBK,MAElD,kBAAC,EAAUC,U,kCCnBrB,sHAgCeM,UAxBsB,SAAC,GAAyB,IAAfC,EAAe,EAAvBC,KAAQD,OAAe,EAClCE,cAAnBC,EADqD,EACrDA,SAAUC,EAD2C,EAC3CA,KAClB,OACE,kBAAC,IAAD,CAAMzB,WAAS,EAAC0B,QAAS,EAAGC,WAAY,UAAW1B,UAAW,UAC5D,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,CAAY0B,MAAO,SAAUxB,QAAQ,MAClCoB,IAGL,kBAAC,IAAD,CAAMtB,MAAI,GACR,kBAAC,IAAD,CACEK,MAAOc,EAAOQ,MAAMjB,KAAI,gBAASkB,EAAT,EAAGC,KAAH,MAAqB,CAC3ClC,MAAOiC,EAAKE,YAAYnC,MACxBN,KAAMuC,EAAKE,YAAYzC,KACvBO,OAAQgC,EAAKE,YAAYlC,OACzBe,KAAMiB,EAAKG,OAAOC,wBAGtB,kBAAC,IAAD,CAAeC,GAAI,SAAaV,EAAhC,UAQD,IAAMW,EAAQ","file":"component---src-pages-index-tsx-59d7ef58a03577fd05f6.js","sourcesContent":["type Props = Date | string | number\n\nexport const dateFormat = (date: Props) => {\n  date = new Date(date)\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\n}\n","import React, { FC } from \"react\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport { dateFormat } from \"../../utils\"\n\ntype Props = {\n  title: string\n  author: string\n  date: string | Date | number\n}\n\nexport const Entry: FC<Props> = ({ title, author, date }) => {\n  return (\n    <Grid container direction={\"column\"}>\n      <Grid item>\n        <Typography variant={\"h6\"}>{title}</Typography>\n      </Grid>\n      <Grid item>\n        <Grid container direction={\"row\"} justify={\"space-between\"}>\n          <Grid item>\n            <Typography variant={\"subtitle1\"}>{author}</Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant={\"subtitle1\"}>{dateFormat(date)}</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n","import React, { FC, ComponentProps, useContext } from \"react\"\nimport { navigate } from \"gatsby\"\nimport { List, ListItem } from \"@material-ui/core\"\n\nimport { localize, LocaleContext } from \"../../i18n\"\nimport { Entry } from \"./Entry\"\n\ntype Props = {\n  posts: Array<{ slug: string } & ComponentProps<typeof Entry>>\n}\nexport const BlogList: FC<Props> = ({ posts }) => {\n  const locale = useContext(LocaleContext)\n  return (\n    <List>\n      {posts.map(({ slug, ...other }) => (\n        <ListItem\n          button\n          onClick={() => navigate(localize(locale, `/post/${slug}`))}\n        >\n          <Entry {...other} />\n        </ListItem>\n      ))}\n    </List>\n  )\n}\n","import React, { FC } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Typography, Grid } from \"@material-ui/core\"\n\nimport { BlogPageProps } from \"../types\"\nimport { LocalizedLink, useTranslation } from \"../i18n\"\nimport { BlogList } from \"../components/Blog\"\n\nconst IndexPage: FC<BlogPageProps> = ({ data: { allMdx } }) => {\n  const { greeting, more } = useTranslation()\n  return (\n    <Grid container spacing={5} alignItems={\"stretch\"} direction={\"column\"}>\n      <Grid item>\n        <Typography align={\"center\"} variant=\"h3\">\n          {greeting}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <BlogList\n          posts={allMdx.edges.map(({ node: post }) => ({\n            title: post.frontmatter.title,\n            date: post.frontmatter.date,\n            author: post.frontmatter.author,\n            slug: post.parent.relativeDirectory\n          }))}\n        />\n        <LocalizedLink to={\"/post\"}>{`${more}...`}</LocalizedLink>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query Toc($locale: String!) {\n    allMdx(\n      limit: 3\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { fields: { locale: { eq: $locale } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            author\n            date\n          }\n          fields {\n            name\n            locale\n          }\n          parent {\n            ... on File {\n              relativeDirectory\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}