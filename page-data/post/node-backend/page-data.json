{"componentChunkName":"component---src-template-blog-tsx","path":"/post/node-backend","result":{"data":{"mdx":{"frontmatter":{"title":"Node.js Backend","author":"onichandame","date":"2020-08-05T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node.js Backend\",\n  \"author\": \"onichandame\",\n  \"date\": \"2020-08-05T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#post\"\n  }), \"POST\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#formidable\"\n  }), \"Formidable\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#body-parser\"\n  }), \"Body Parser\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#url-encoded\"\n  }), \"URL Encoded\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#json\"\n  }), \"JSON\")))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#gfw\"\n  }), \"GFW\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#authentication--authorization\"\n  }), \"Authentication & Authorization\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#auth-of-end-user\"\n  }), \"Auth of End User\"))))), mdx(\"p\", null, \"Here I record the issues found during the development of backend services running in Node.js.\"), mdx(\"h1\", null, \"POST\"), mdx(\"p\", null, \"There are 2 commonly used libraries to handle POST request: Formidable and Body-Parser.\"), mdx(\"h2\", null, \"Formidable\"), mdx(\"p\", null, \"This tool can handle both field values and files. It is less popular than it's counterpart though.\"), mdx(\"h2\", null, \"Body Parser\"), mdx(\"p\", null, \"This tool can handle only field values. There are 2 formats: url encoded and json.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"import bodyParser from \\\"body-parser\\\"\\n\")), mdx(\"h3\", null, \"URL Encoded\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"server.use(bodyParser.urlencoded({ extended: true }))\\n\")), mdx(\"h3\", null, \"JSON\"), mdx(\"p\", null, \"The client must set header \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Content-Type\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application/json\"), \" for Body Parser to understand the request.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"server.use(bodyParser.json())\\n\")), mdx(\"h1\", null, \"GFW\"), mdx(\"p\", null, \"For users in China, npm registry is often unavailable due to censorship. To solve this problem, the developers at Alibaba made a mirror registry which is synced with the official registry every 10 minutes. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.aliyun.com/mirror/NPM?from=tnpm\"\n  }), \"This docs\"), \" tells how to use this registry.\"), mdx(\"h1\", null, \"Authentication & Authorization\"), mdx(\"p\", null, \"The auth(authentication and authorization) is a 2-fold problem. It includes the auth between services and the auth between the end user and the gateway service. The gateway service is the one that is exposed to the end users.\"), mdx(\"h2\", null, \"Auth of End User\"), mdx(\"p\", null, \"There are several keystones to consider.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The auth data, permanent(credentials) or temporary(session) must be horizontally scalable. To be specific, a user registered with or logged in a gateway service should not have to do the registration/login all over again when using another gateway instance of the same kind.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The different services in the same workflow or serving closely related customers should share the same auth pattern, so that every user in the same workflow is unique allowing business logic and workflow to change flexibly without conflict.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The dicision of registration pattern should be set once for all. For internal services, invitation pattern is higher on the list. In this pattern the permission pattern can be simplfied to focus on the business workflow as the security can rely on the real world relationships. For open registration model, the assumption that the end user is an experienced hacker infiltrating our service must be made.\")), mdx(\"p\", null, \"Some useful technologies.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Passport.js\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoDB/Mongoose\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Express.js\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"POST","depth":1},{"value":"Formidable","depth":2},{"value":"Body Parser","depth":2},{"value":"URL Encoded","depth":3},{"value":"JSON","depth":3},{"value":"GFW","depth":1},{"value":"Authentication & Authorization","depth":1},{"value":"Auth of End User","depth":2}]}},"pageContext":{"locale":"en","type":"post","title":"Node.js Backend","date":"2020-08-05T00:00:00.000Z","author":"onichandame"}},"staticQueryHashes":["440568431","840944156","899237799","899237799"]}