{"componentChunkName":"component---src-template-blog-tsx","path":"/post/mongo","result":{"data":{"mdx":{"frontmatter":{"title":"MongoDB in Development","author":"onichandame","date":"2019-09-09T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MongoDB in Development\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-09-09T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#document-size-limit\"\n  }), \"Document Size Limit\"))), mdx(\"p\", null, \"Here I record the issues found during the development using MongoDB and Mongoose ORM.\"), mdx(\"h1\", {\n    \"id\": \"document-size-limit\"\n  }, \"Document Size Limit\"), mdx(\"p\", null, \"According to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.mongodb.com/manual/core/document/#document-size-limit\"\n  }), \"the official doc\"), \", each document in MongoDB should not exceed 16 megabytes. For most non-plain-file data, this limit is high enough that it does not impose any limit on the development. However, in case some documents are expected to exceed this limit, some safety measures should be taken.\"), mdx(\"p\", null, \"The most intuitive and simple solution will be to split the data into multiple documents. For the documents starting small the implementation of the solution is quite simple:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/image/split-document.png\",\n    \"alt\": \"flow\"\n  }))), mdx(\"p\", null, \"As shown above, when appending new data to the document, the first try assumes that the operation can simply succeed. Once error code 17419 is thrown, the server rejects the operation as the resulting document's size will exceed the limit. Now new document must be created to store the new data.\"), mdx(\"p\", null, \"This solution does require some handling on the application layer, like merging documents on query. But the overhead of data insertion is kept minimal.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Document Size Limit","depth":1}]}},"pageContext":{"locale":"en","type":"post","title":"MongoDB in Development","date":"2019-09-09T00:00:00.000Z","author":"onichandame"}}}