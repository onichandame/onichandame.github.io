{"componentChunkName":"component---src-template-blog-tsx","path":"/post/use-container-for-development","result":{"data":{"mdx":{"frontmatter":{"title":"Use Container for Development","author":"onichandame","date":"2019-05-25T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use Container for Development\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-05-25T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"As a full-time developer working in an office, I have to regularly switch between 'working-at-home' and 'working-at-office' modes. Thus it comes with a major problem: how to synchronize the development environment at home and the office?\"), mdx(\"h1\", {\n    \"id\": \"thoughts\"\n  }, \"Thoughts\"), mdx(\"p\", null, \"The first thought that naively comes to my mind is automating the setup process of the development environment. As a half DevOps, scripting is the first tool that comes up when I need to solve a problem.\"), mdx(\"p\", null, \"However, scripting does not treat different OS/platforms equally. So I have to write different scripts for different OS. This approach does not guarantee the synchronization between different OS. Therefore scripting does not help.\"), mdx(\"p\", null, \"Now the Container comes to rescue. I had to deal with containers a lot for work so it is not too unfamiliar. Container suits the need for the following reasons:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"abstracts the OS so only 1 OS needs to be considered\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"sharing files with different host OS is easy\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"available on most major OS\")), mdx(\"h1\", {\n    \"id\": \"challenges\"\n  }, \"Challenges\"), mdx(\"p\", null, \"It is not trivial to use container for development. First of all I need to access the tty of a container using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-it\"), \" flag. Then the development files need to be stored on the host for permanent storage using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-v\"), \" flag. Lastly flag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" is required to map the ports of the container and the host. Apart from these common setup, several unusual problems need to be solved.\"), mdx(\"h2\", {\n    \"id\": \"podman\"\n  }, \"Podman\"), mdx(\"p\", null, \"Podman is a daemonless container runtime. It requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--security-opt label=disable\"), \" to bypass SELinux for sharing files with the host.\"), mdx(\"h2\", {\n    \"id\": \"reduce-image-size\"\n  }, \"Reduce Image Size\"), mdx(\"p\", null, \"As development environment requires a lot of tools to be installed, the image is inevitably bloated. My image weights 2.7GB. Therefore it is very helpful to reduce the image size.\"), mdx(\"p\", null, \"The best way to reduce image size is rebasing the image to alpine and musl-libc. However, one of my project requries glibc and CentOS. I cannot shift my development to alpine.\"), mdx(\"p\", null, \"Another approach is to merge the steps. This approach cannot reduce the image size by a lot, but it has another benefit.\"), mdx(\"p\", null, \"To reduce the number of steps as much as possible, I put all setup commands to a bash script. So the Dockerfile only contains 1 line running the setup command.\"), mdx(\"h2\", {\n    \"id\": \"nofile-limit\"\n  }, \"NOFILE Limit\"), mdx(\"p\", null, \"When developing a frontend with plenty of source files and dependencies, the development server usually needs to watch all the changes in the source files. This sometimes exceeds the system's watch file limit.\"), mdx(\"p\", null, \"The watch file limit is defined by a hard limit and a soft limit. When the soft limit is exceeded, the user is warned. When the hard limit is hit, the watcher's process throws an error. Therefore both limits need to be raised.\"), mdx(\"p\", null, \"The solution is to increase the host's NOFILE limit. The containers automatically inherits the host's limit.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Thoughts","depth":1},{"value":"Challenges","depth":1},{"value":"Podman","depth":2},{"value":"Reduce Image Size","depth":2},{"value":"NOFILE Limit","depth":2}]}},"pageContext":{"locale":"en","title":"Use Container for Development","date":"2019-05-25T00:00:00.000Z","author":"onichandame"}}}