{"componentChunkName":"component---src-template-blog-tsx","path":"/post/rootless-systemd-and-podman","result":{"data":{"mdx":{"frontmatter":{"title":"Rootless systemd and Podman","author":"onichandame","date":"2019-05-19T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rootless systemd and Podman\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-05-19T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#steps\"\n  }), \"Steps\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-the-service\"\n  }), \"Create the service\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-the-content\"\n  }), \"add the content\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#enable-the-service\"\n  }), \"enable the service\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#optional-enable-linger\"\n  }), \"(optional) enable linger\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#podman-service\"\n  }), \"Podman Service\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#credits\"\n  }), \"Credits\"))), mdx(\"p\", null, \"Systemd is a useful tool programmatically managing routine tasks. I encountered a specific situation with some constraints:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"start task on boot as a non-root user\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"auto restart on failure\")), mdx(\"p\", null, \"The solution to this issue is to create a systemd task as the non-root user.\"), mdx(\"h1\", {\n    \"id\": \"steps\"\n  }, \"Steps\"), mdx(\"h2\", {\n    \"id\": \"create-the-service\"\n  }, \"Create the service\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"systemctl edit --user --full --force <service_name>\\n\")), mdx(\"h2\", {\n    \"id\": \"add-the-content\"\n  }, \"add the content\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[Unit]\\nDescription=<Service>\\n\\n[Service]\\nRestart=always\\nExecStart=<Servece_Start>\\nExecStop=<Service_Stop>\\n\\n[Install]\\nWantedBy=default.target\\n\")), mdx(\"p\", null, \"the last line registers the service to the dependency list for auto-start\"), mdx(\"h2\", {\n    \"id\": \"enable-the-service\"\n  }, \"enable the service\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"systemctl enable --user <service_name>\\n\")), mdx(\"h2\", {\n    \"id\": \"optional-enable-linger\"\n  }, \"(optional) enable linger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" sudo loginctl enable-linger \\\"$USER\\\"\\n\")), mdx(\"p\", null, \"This is to allow the service continuing to run after the user is logged out.\"), mdx(\"h1\", {\n    \"id\": \"podman-service\"\n  }, \"Podman Service\"), mdx(\"p\", null, \"When running podman container as a systemd service, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExecStart\"), \" command should be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"podman start -a <container_name>\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExecStop\"), \" command should be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"podman stop -t <seconds_to_wait> <container_name>\"), \". Details can be found at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/managing_containers/running_containers_as_systemd_services_with_podman\"\n  }), \"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/managing_containers/running_containers_as_systemd_services_with_podman\")), mdx(\"h1\", {\n    \"id\": \"credits\"\n  }, \"Credits\"), mdx(\"p\", null, \"Thanks to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/systemd/systemd/issues/2690\"\n  }), \"this issue\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Steps","depth":1},{"value":"Create the service","depth":2},{"value":"add the content","depth":2},{"value":"enable the service","depth":2},{"value":"(optional) enable linger","depth":2},{"value":"Podman Service","depth":1},{"value":"Credits","depth":1}]}},"pageContext":{"locale":"en","type":"post","title":"Rootless systemd and Podman","date":"2019-05-19T00:00:00.000Z","author":"onichandame"}}}