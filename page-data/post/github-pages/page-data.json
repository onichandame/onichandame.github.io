{"componentChunkName":"component---src-template-blog-tsx","path":"/post/github-pages","result":{"data":{"mdx":{"frontmatter":{"title":"Github Pages","author":"onichandame","date":"2020-06-01T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Github Pages\",\n  \"author\": \"onichandame\",\n  \"date\": \"2020-06-01T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#github-actions\"\n  }), \"Github Actions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#personal-homepage\"\n  }), \"Personal Homepage\"))), mdx(\"p\", null, \"Many of my personal projects are frontend libraries. These projects ought to be published with a demo website where the users can conveniently view the outcome without cloning or building. However, web hosting is not so cheap that every one of my projects is worth the service.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pages.github.com/\"\n  }), \"Github Pages(Pages)\"), \" provides a cheap(free) solution. Here I record the tricks I found in using Pages.\"), mdx(\"h1\", null, \"Github Actions\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pages.github.com/\"\n  }), \"The guide\"), \" has a comprehensive guide of publishing a user-scope website. But it does not formularize the development workflow.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/actions\"\n  }), \"Github Actions(Actions)\"), \" is a great CI/CD automation tool. Using this tool, the publication of the pages can be kept sync with the development automatically.\"), mdx(\"p\", null, \"By default the sources of the website should be pushed to the branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh-pages\"), \". Thanks to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/JamesIves/github-pages-deploy-action\"\n  }), \"this action\"), \", the whole process can be automated.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"ghpage-publish:\\n  name: ghpage-publish\\n  runs-on: ubuntu-latest\\n  steps:\\n    - name: Checkout repository\\n      uses: actions/checkout@master\\n    - name: Set up Node.js\\n      uses: actions/setup-node@master\\n      with:\\n        node-version: 14.x\\n    - name: Set up dependency\\n      run: yarn install --frozen-lockfile\\n    - name: Build pages\\n      run: yarn build:docs\\n    - name: Publish\\n      uses: JamesIves/github-pages-deploy-action@releases/v3\\n      with:\\n        ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n        BRANCH: gh-pages\\n        FOLDER: docs\\n\")), mdx(\"p\", null, \"The above action pre-assumes that the project is based on Node.js, and that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" is used as the package manager, and that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build:docs\"), \" script builds the website into /docs directory. When the action succeeds, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh-pages\"), \" branch contains the latest website.\"), mdx(\"p\", null, \"One annoying thing is when it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh-page\"), \" is created for the first time, it has to be done manually. Otherwise the publishing is never triggered. This might be a bug but I haven't seen any issue about it. Another workaround is to manually trigger it via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl -X POST -i -u \\\"<username>\\\" https://api.github.com/repos/<username>/<reponame>/pages/builds\"), \" according to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.github.com/v3/repos/pages/\"\n  }), \"this guide\"), \".\"), mdx(\"h1\", null, \"Personal Homepage\"), mdx(\"p\", null, \"Pages not only provides web hosting for projects, but also for users. Each github user is able to host 1 user-scope website. The source is stored in the repo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<username>.github.io\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \" branch of this repo contains all the sources. But in many cases the website itself is built from other sources, such as React. If it is the case, it is necessary to maintain an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" branch that contains the source files. Actions can then be used to build and publish the website.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Github Actions","depth":1},{"value":"Personal Homepage","depth":1}]}},"pageContext":{"locale":"en","type":"post","title":"Github Pages","date":"2020-06-01T00:00:00.000Z","author":"onichandame"}},"staticQueryHashes":["440568431","840944156","899237799","899237799"]}