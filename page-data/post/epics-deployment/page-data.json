{"componentChunkName":"component---src-template-blog-tsx","path":"/post/epics-deployment","result":{"data":{"mdx":{"frontmatter":{"title":"EPICS Deployment","author":"onichandame","date":"2020-05-08T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"EPICS Deployment\",\n  \"author\": \"onichandame\",\n  \"date\": \"2020-05-08T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#system-architecture\"\n  }, \"System Architecture\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#challenges\"\n  }, \"Challenges\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#base-image\"\n  }, \"Base Image\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#connection-between-different-hosts\"\n  }, \"Connection between Different Hosts\"))))), mdx(\"p\", null, \"As a newbie in the world of EPICS and hardware control system, every day many new challenges come and many are solved. This is a record of the experience so that when the same problem comes in the future, I don't need to get through it again.\"), mdx(\"h1\", null, \"System Architecture\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/image/epics-arch.png\",\n    \"alt\": \"arch\"\n  })), mdx(\"p\", null, \"The details of the architecture are not covered here. Broadly speaking, the proxy converts EPICS protocol to GraphQL or vice versa. For details, check \", mdx(LocalizedLink, {\n    to: '/post/an-epics-proxy',\n    mdxType: \"LocalizedLink\"\n  }, \"this post\"), \" for detailes.\"), mdx(\"h1\", null, \"Challenges\"), mdx(\"p\", null, \"This section records all major challenges I have met. Some are trivial but I was not smart enough to find a solution immediately.\"), mdx(\"h2\", null, \"Base Image\"), mdx(\"p\", null, \"The best base image a container is based on is probably Alpine. However, there are issues combining Alpine and EPICS.\"), mdx(\"p\", null, \"The most apparent issue is the libc. Alpine is shipped with musl-libc but EPICS is based on glibc. Although there is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sgerrand/alpine-pkg-glibc\"\n  }, \"glibc compiled for Alpine\"), \", the next issue is not fixable.\"), mdx(\"p\", null, \"EPICS uses libstdc++. libstdc++ on Alpine is based on musl-libc. EPICS also uses glibc for Alpine. At the end of day, libstdc++ is tricked to believe that it is in glibc environment, which is not true. So a link/call from EPICS to libstdc++ to glibc will fail. The only fix to this issue is to base libstdc++ on glibc, which has not been done by anyone yet. If I were to do it, I would rather base EPICS on musl-libc as it is more light-weight and better adhere to the ecosystem of Alpine.\"), mdx(\"p\", null, \"As a result, the best base image for now is CentOS 7/8.\"), mdx(\"h2\", null, \"Connection between Different Hosts\"), mdx(\"p\", null, \"The connection between CA client and IOC server is the most anti-intuitive part for me. EPICS provides a convenient technology \\\"UDP broadcasting\\\", which helps establish connection when both parties have no knowledge of the IP address of each other.\"), mdx(\"p\", null, \"However, This method only works as expected when both parties are in the same and the only subnet. e.g. when the CA client has 2 IP addresses in 2 different subnets, such as 10.0.0.1 and 192.168.1.1, it is not guaranteed to be able to find an IOC whose address is 192.168.1.100.\"), mdx(\"p\", null, \"When no better architecture design is feasible, one has to provide the IP address of the IOC server to the CA client, so that the client knows where to look for the IOC. The way to tell is by setting an environmental variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EPICS_CA_ADDR_LIST\"), \" when starting the CA client. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export EPICS_CA_ADDR_LIST=192.168.1.100\\n# CA connect here\\n\")), mdx(\"p\", null, \"However, it is generally a better practice to minimize the necessary configurations. A better solution here is putting the CA client in the subnet where IOC servers are found and no other subnets. In my architecture, it means that the web services and IOCs, as well as the proxy, are in the same subnet. This is achievable when the number of IOCs is relatively small. When there is large number of IOCs, they must be divided into different subnets for better management. In that case, a workaround can be made by introducing another layer of proxy between web services and the EPICS proxy, so that the EPICS proxy can stay with 1 IP.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"System Architecture","depth":1},{"value":"Challenges","depth":1},{"value":"Base Image","depth":2},{"value":"Connection between Different Hosts","depth":2}]}},"pageContext":{"locale":"en","type":"post","title":"EPICS Deployment","date":"2020-05-08T00:00:00.000Z","author":"onichandame"}},"staticQueryHashes":["440568431","840944156","899237799","899237799"]}