{"componentChunkName":"component---src-template-blog-tsx","path":"/post/develop-with-nats","result":{"data":{"mdx":{"frontmatter":{"title":"Develop with NATS","author":"onichandame","date":"2019-06-06T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Develop with NATS\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-06-06T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#development-setup\"\n  }), \"Development Setup\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#mock-nats-client\"\n  }), \"Mock NATS Client\"))))), mdx(\"p\", null, \"When developing backend services, it is usually a good idea to decouple the services by routing all the communications through a messaging layer.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nats.io/\"\n  }), \"NATS\"), \" is a cross-language messaging layer. It officially supports clients written in Golang, TypeScript, Java, etc. The biggest difference compared to the traditional messaging service such as Kafka is that NATS delivers a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"at-most-once\"), \" strategy, meaning each message will be delivered to the subscribers at most once. The delivery is allowed to fail and the failure is expected to be handled by the applications.\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"at-most-once\"), \" design is somewhat resembling the PubSub system or the event emitter/listener system. A very useful feature NATS provides is the request-reply function, where the publisher awaits at least one subscriber to have replied.\"), mdx(\"h1\", {\n    \"id\": \"development-setup\"\n  }, \"Development Setup\"), mdx(\"p\", null, \"To develop services based on NATS, several common issues must be addressed.\"), mdx(\"h2\", {\n    \"id\": \"mock-nats-client\"\n  }, \"Mock NATS Client\"), mdx(\"p\", null, \"Unit test is a necessity to build a robust service. A common practice is to mock all the actions that requires external resources during the unit test. NATS connection is one of the resources requiring mocking.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/FrostDigital/mock-nats-client\"\n  }), \"This repo\"), \" provides a mocked NATS client for JavaScript. There are some caveats tho: it is not shipped with types and it does not fully support the subscription options.\"), mdx(\"p\", null, \"Therefore I made \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/onichandame/mock-nats-client\"\n  }), \"my own fork\"), \" published as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@onichandame/mock-nats-client\"), \". My fork is written in TypeScript and utilizes the original typing of NATS Client. As a result, the mocked functions have the same signatures as the original NATS Client.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Development Setup","depth":1},{"value":"Mock NATS Client","depth":2}]}},"pageContext":{"locale":"en","type":"post","title":"Develop with NATS","date":"2019-06-06T00:00:00.000Z","author":"onichandame"}}}