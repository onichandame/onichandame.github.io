{"version":3,"sources":["webpack:///./src/utils/dateFormat.ts","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./src/template/blog.tsx"],"names":["dateFormat","date","Date","getFullYear","getMonth","getDate","MDXRenderer","require","module","React","useMDXComponents","mdx","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn","Post","data","locale","pageContext","title","frontmatter","lang","container","direction","spacing","item","variant","justify","author","headings","body","query"],"mappings":"+HAEO,IAAMA,EAAa,SAACC,GAEzB,OADAA,EAAO,IAAIC,KAAKD,IACDE,cAAf,KAAgCF,EAAKG,WAAa,GAAlD,IAAuDH,EAAKI,Y,uBCE9D,IAAMC,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,qrECTf,IAAMG,EAAQF,EAAd,Q,EACkCA,EAAQ,QAAlCG,E,EAAAA,iBAAkBC,E,EAAAA,IAClBC,EAAgBL,EAAQ,QAAxBK,YAERJ,UAAiB,SAAqB,GAKlC,IAJFK,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBP,EAAtB,GACMQ,EAAWN,EAFhB,GAKKO,EAAMV,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMW,EAAS,GAGbX,MAHa,EAIbE,OAJF,GAQMU,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAON,EAAA,mBAA2BK,WAAYG,GAA9C,M,kCClCF,kIAyDeS,UA9BS,SAAC,GAA+C,IAArCf,EAAqC,EAA7CgB,KAAQhB,IAAsBiB,EAAe,EAA9BC,YAAeD,OACvD,OACE,oCACE,kBAAC,IAAD,CAAKE,MAAOnB,EAAIoB,YAAYD,MAAOE,KAAMJ,IACzC,kBAAC,IAAD,CAAMK,WAAS,EAACC,UAAW,SAAUC,QAAS,GAC5C,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,CAAYC,QAAS,MAAO1B,EAAIoB,YAAYD,QAE9C,kBAAC,IAAD,CAAMM,MAAI,GACR,kBAAC,IAAD,CAAMH,WAAS,EAACK,QAAS,gBAAiBJ,UAAW,OACnD,kBAAC,IAAD,CAAME,MAAI,GACR,kBAAC,IAAD,CAAYC,QAAS,WAClB1B,EAAIoB,YAAYQ,SAGrB,kBAAC,IAAD,CAAMH,MAAI,GACR,kBAAC,IAAD,CAAYC,QAAS,WAClBrC,YAAWW,EAAIoB,YAAY9B,UAKpC,kBAAC,IAAD,CAAMmC,MAAI,GACR,kBAAC,cAAD,CAAaI,SAAU7B,EAAI6B,UAAW7B,EAAI8B,UAS7C,IAAMC,EAAQ","file":"component---src-template-blog-tsx-538be02797d6b4522b70.js","sourcesContent":["type Props = Date | string | number\n\nexport const dateFormat = (date: Props) => {\n  date = new Date(date)\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\n}\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","import React, { FC } from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport { Grid, Typography } from \"@material-ui/core\"\n\nimport { dateFormat } from \"../utils\"\nimport { SEO } from \"../components/SEO\"\n\ntype Props = PageProps<\n  {\n    mdx: {\n      frontmatter: {\n        title: string\n        author: string\n        date: string\n      }\n      body: string\n      headings: string[]\n    }\n  },\n  {\n    locale: string\n    title: string\n    author: string\n  }\n>\n\nconst Post: FC<Props> = ({ data: { mdx }, pageContext: { locale } }) => {\n  return (\n    <>\n      <SEO title={mdx.frontmatter.title} lang={locale} />\n      <Grid container direction={\"column\"} spacing={2}>\n        <Grid item>\n          <Typography variant={\"h3\"}>{mdx.frontmatter.title}</Typography>\n        </Grid>\n        <Grid item>\n          <Grid container justify={\"space-between\"} direction={\"row\"}>\n            <Grid item>\n              <Typography variant={\"caption\"}>\n                {mdx.frontmatter.author}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant={\"caption\"}>\n                {dateFormat(mdx.frontmatter.date)}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <MDXRenderer headings={mdx.headings}>{mdx.body}</MDXRenderer>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Post\n\nexport const query = graphql`\n  query Post($locale: String!, $title: String!, $type: String!) {\n    mdx(\n      frontmatter: { title: { eq: $title } }\n      fields: { locale: { eq: $locale }, type: { eq: $type } }\n    ) {\n      frontmatter {\n        title\n        author\n        date\n      }\n      body\n      headings {\n        value\n        depth\n      }\n    }\n  }\n`\n"],"sourceRoot":""}