{"componentChunkName":"component---src-template-blog-tsx","path":"/post/use-container-for-development","result":{"data":{"mdx":{"frontmatter":{"title":"Use Container for Development","author":"onichandame","date":"2019-05-28T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use Container for Development\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-05-28T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#thoughts\"\n  }), \"Thoughts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#challenges\"\n  }), \"Challenges\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#podman\"\n  }), \"Podman\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#reduce-image-size\"\n  }), \"Reduce Image Size\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#nofile-limit\"\n  }), \"NOFILE Limit\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#utf-8-encoding\"\n  }), \"UTF-8 Encoding\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#windows-10\"\n  }), \"Windows 10\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#docker-engine\"\n  }), \"Docker Engine\")))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#implementation\"\n  }), \"Implementation\"))), mdx(\"p\", null, \"As a full-time developer working in office, I have to regularly switch between 'working-at-home' and 'working-at-office' modes. Thus it comes with a major problem: how to synchronize the development environment at home and the office?\"), mdx(\"h1\", {\n    \"id\": \"thoughts\"\n  }, \"Thoughts\"), mdx(\"p\", null, \"The first thought that naively comes to my mind is automating the setup process of the development environment. As a half DevOps, scripting is the first tool that comes up when I need to solve a problem.\"), mdx(\"p\", null, \"However, scripting does not treat different OS/platforms equally. So I have to write different scripts for different OS. This approach does not guarantee the synchronization between different OS. Therefore scripting does not help.\"), mdx(\"p\", null, \"Now the Container comes to rescue. I had to deal with containers a lot for work so it is not too unfamiliar. Container suits the need for the following reasons:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"abstracts the OS so only 1 OS needs to be considered\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"sharing files with different host OS is easy\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"available on most major OS\")), mdx(\"h1\", {\n    \"id\": \"challenges\"\n  }, \"Challenges\"), mdx(\"p\", null, \"It is not trivial to use container for development. First of all I need to access the tty of a container using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-it\"), \" flag. Then the development files need to be stored on the host for permanent storage using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-v\"), \" flag. Lastly flag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" is required to map the ports of the container and the host. Apart from these common setup, several unusual problems need to be solved.\"), mdx(\"p\", null, \"Basic knowledge of Linux configuration and commands are preassumed.\"), mdx(\"h2\", {\n    \"id\": \"podman\"\n  }, \"Podman\"), mdx(\"p\", null, \"Podman is a daemonless container runtime. It requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--security-opt label=disable\"), \" to bypass SELinux for sharing files with the host.\"), mdx(\"h2\", {\n    \"id\": \"reduce-image-size\"\n  }, \"Reduce Image Size\"), mdx(\"p\", null, \"As development environment requires a lot of tools to be installed, the image is inevitably bloated. My image weights 2.7GB. Therefore it is very helpful to reduce the image size.\"), mdx(\"p\", null, \"The best way to reduce image size is rebasing the image to alpine and musl-libc. However, one of my project requries glibc and CentOS. I cannot shift my development to alpine.\"), mdx(\"p\", null, \"Another approach is to merge the steps. This approach cannot reduce the image size by a lot, but it has another benefit that clarifies the setup process.\"), mdx(\"p\", null, \"To reduce the number of steps as much as possible, I put all setup commands to a bash script. So the Dockerfile only contains 1 line running the setup command.\"), mdx(\"h2\", {\n    \"id\": \"nofile-limit\"\n  }, \"NOFILE Limit\"), mdx(\"p\", null, \"When developing a frontend with plenty of source files and dependencies, the development server usually needs to watch all the changes in the source files. This sometimes exceeds the system's watch file limit.\"), mdx(\"p\", null, \"The watch file limit is defined by a hard limit and a soft limit. When the soft limit is exceeded, the user is warned. When the hard limit is hit, the watcher's process throws an error. Therefore both limits need to be raised.\"), mdx(\"p\", null, \"The solution is to increase the host's NOFILE limit. The containers automatically inherits the host's limit. \", mdx(LocalizedLink, {\n    to: '/post/ulimit',\n    mdxType: \"LocalizedLink\"\n  }, \"Check this\"), \" for the detailed setup.\"), mdx(\"h2\", {\n    \"id\": \"utf-8-encoding\"\n  }, \"UTF-8 Encoding\"), mdx(\"p\", null, \"As the base image is usually minimized for performance, the default encoding is set to ASCII. This won't be a problem if the host machine has UTF-8 enabled and that container interface directly displays the output as the encoded characters are passed straight to the host for decoding. However, it gets problematic when using tmux inside the container as tmux only passes the decoded character to the screen which it does not understand.\"), mdx(\"p\", null, \"The first step is the add special characters to the container. In my case, I added Simplified Chinese by installing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"glibc-langpack-zh\"), \". Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale -a\"), \" to check if the desired language has been installed.\"), mdx(\"p\", null, \"The last step is setting the default encoding to UTF-8 by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export LANG=\\\"zh_CN.UTF-8\\\"\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export LC_ALL=\\\"zh_CN.UTF-8\\\"\"), \" to bashrc.\"), mdx(\"h2\", {\n    \"id\": \"windows-10\"\n  }, \"Windows 10\"), mdx(\"p\", null, \"Docker was originally made for Linux. Running in on Windows is always troublesome. Here I records the main issues solved for Windows 10.\"), mdx(\"h3\", {\n    \"id\": \"docker-engine\"\n  }, \"Docker Engine\"), mdx(\"p\", null, \"At the time writing this sentence, Docker Desktop mainly provides 2 engines: HyperV(legacy) and WSL 2.\"), mdx(\"p\", null, \"HyperV works as a traditional VM hypervisor, which is utilized by Docker Desktop to maintain a VM where the docker daemon is run.\"), mdx(\"p\", null, \"WSL 2 on the other hand, provides a deeply integrated Linux kernel. This is a faster solution so I choose to use this engine.\"), mdx(\"p\", null, \"The first step is to install WSL 2. Check \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/windows/wsl/wsl2-install\"\n  }), \"this\"), \" for the official guide.\"), mdx(\"p\", null, \"Having WSL 2 installed, now check the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Use the WSL 2 based engine\"), \" option in the General settings of the Docker Desktop. Restart the docker daemon for this action to take effect. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: by restarting the daemon, all the images in the old daemon will be lost!\"), \".\"), mdx(\"p\", null, \"WSL 2 at this moment suffers from a fatal bug. If you try to start a Linux distro backed by WSL 2, and see the error message \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the attempted operation is not supported for the type of object referenced.\"), \", it means that WinSock has caused the WSL 2 to collapse. According to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/microsoft/WSL/issues/4177\"\n  }), \"this issue\"), \", running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"netsh winsock reset\"), \" as admin works around the bug once and for all.\"), mdx(\"h1\", {\n    \"id\": \"implementation\"\n  }, \"Implementation\"), mdx(\"p\", null, \"The structure of the source project is as follows:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/image/container-development-structure.png\",\n    \"alt\": \"struc\"\n  }))), mdx(\"p\", null, \"The run.sh is the main script that is run during container build.\"), mdx(\"p\", null, \"The files folder contains all the configuration files like vimrc and bashrc.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/onichandame/docker-dev/\"\n  }), \"Check this\"), \" for the source files.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/repository/docker/onichandame/docker-dev\"\n  }), \"Check this\"), \" for the built image.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Thoughts","depth":1},{"value":"Challenges","depth":1},{"value":"Podman","depth":2},{"value":"Reduce Image Size","depth":2},{"value":"NOFILE Limit","depth":2},{"value":"UTF-8 Encoding","depth":2},{"value":"Windows 10","depth":2},{"value":"Docker Engine","depth":3},{"value":"Implementation","depth":1}]}},"pageContext":{"locale":"en","type":"post","title":"Use Container for Development","date":"2019-05-28T00:00:00.000Z","author":"onichandame"}}}