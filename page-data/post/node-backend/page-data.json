{"componentChunkName":"component---src-template-blog-tsx","path":"/post/node-backend","result":{"data":{"mdx":{"frontmatter":{"title":"Node.js Backend","author":"onichandame","date":"2019-06-02T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node.js Backend\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-06-02T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#post\"\n  }), \"POST\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#formidable\"\n  }), \"Formidable\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#body-parser\"\n  }), \"Body Parser\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#url-encoded\"\n  }), \"URL Encoded\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#json\"\n  }), \"JSON\")))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#authentication\"\n  }), \"Authentication\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#common-features\"\n  }), \"Common Features\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#self-contained\"\n  }), \"Self Contained\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#centralized\"\n  }), \"Centralized\"))), mdx(\"p\", null, \"Here I record the issues found during the development of backend services running in Node.js.\"), mdx(\"h1\", {\n    \"id\": \"post\"\n  }, \"POST\"), mdx(\"p\", null, \"There are 2 commonly used libraries to handle POST request: Formidable and Body-Parser.\"), mdx(\"h2\", {\n    \"id\": \"formidable\"\n  }, \"Formidable\"), mdx(\"p\", null, \"This tool can handle both field values and files. It is less popular than it's counterpart though.\"), mdx(\"h2\", {\n    \"id\": \"body-parser\"\n  }, \"Body Parser\"), mdx(\"p\", null, \"This tool can handle only field values. There are 2 formats: url encoded and json.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"import bodyParser from 'body-parser'\\n\")), mdx(\"h3\", {\n    \"id\": \"url-encoded\"\n  }, \"URL Encoded\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"server.use(bodyParser.urlencoded({ extended: true }))\\n\")), mdx(\"h3\", {\n    \"id\": \"json\"\n  }, \"JSON\"), mdx(\"p\", null, \"The client must set header \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Content-Type\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application/json\"), \" for Body Parser to understand the request.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"server.use(bodyParser.json())\\n\")), mdx(\"h1\", {\n    \"id\": \"authentication\"\n  }, \"Authentication\"), mdx(\"p\", null, \"There are vaguely 2 approaches to provide authentication service. Both share some common features.\"), mdx(\"h1\", {\n    \"id\": \"common-features\"\n  }, \"Common Features\"), mdx(\"p\", null, \"No matter which approach is chosen, the following features must be implemented:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"user registration, login, logout and login status check\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"administration actions, including invitation, role playing, user deletion, user addition, user reset etc.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"persistent storage for users' credentials and session token\")), mdx(\"h1\", {\n    \"id\": \"self-contained\"\n  }, \"Self Contained\"), mdx(\"p\", null, \"For small-scale systems where sub-systems are independent of each other, authentication can be handled by each sub-system individually.\"), mdx(\"p\", null, \"The commonly used stack for this approach is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoDB\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Passport.js\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Express.js\")), mdx(\"h1\", {\n    \"id\": \"centralized\"\n  }, \"Centralized\"), mdx(\"p\", null, \"For deeply coupled sub-systems, they need to share a single central authentication service\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"POST","depth":1},{"value":"Formidable","depth":2},{"value":"Body Parser","depth":2},{"value":"URL Encoded","depth":3},{"value":"JSON","depth":3},{"value":"Authentication","depth":1},{"value":"Common Features","depth":1},{"value":"Self Contained","depth":1},{"value":"Centralized","depth":1}]}},"pageContext":{"locale":"en","type":"post","title":"Node.js Backend","date":"2019-06-02T00:00:00.000Z","author":"onichandame"}}}