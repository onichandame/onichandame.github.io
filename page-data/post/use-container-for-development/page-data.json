{"componentChunkName":"component---src-template-blog-tsx","path":"/post/use-container-for-development","result":{"data":{"mdx":{"frontmatter":{"title":"Use Container for Development","author":"onichandame","date":"2019-08-31T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use Container for Development\",\n  \"author\": \"onichandame\",\n  \"date\": \"2019-08-31T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#thoughts\"\n  }), \"Thoughts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#challenges\"\n  }), \"Challenges\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#podman\"\n  }), \"Podman\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#keep-container-running\"\n  }), \"Keep Container Running\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#reduce-image-size\"\n  }), \"Reduce Image Size\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#nofile-limit\"\n  }), \"NOFILE Limit\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#utf-8-encoding\"\n  }), \"UTF-8 Encoding\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#windows-10\"\n  }), \"Windows 10\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#docker-engine\"\n  }), \"Docker Engine\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#hyperv\"\n  }), \"HyperV\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#kubernetes\"\n  }), \"Kubernetes\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#setup\"\n  }), \"Setup\")))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#implementation\"\n  }), \"Implementation\"))), mdx(\"p\", null, \"As a full-time developer working in office, I have to regularly switch between 'working-at-home' and 'working-at-office' modes. Thus it comes with a major problem: how to synchronize the development environment at home and the office?\"), mdx(\"h1\", {\n    \"id\": \"thoughts\"\n  }, \"Thoughts\"), mdx(\"p\", null, \"The first thought that naively comes to my mind is automating the setup process of the development environment. As a half DevOps, scripting is the first tool that comes up when I need to solve a problem.\"), mdx(\"p\", null, \"However, scripting does not treat different OS/platforms equally. So I have to write different scripts for different OS. This approach does not guarantee the synchronization between different OS. Therefore scripting does not help.\"), mdx(\"p\", null, \"Now the Container comes to rescue. I had to deal with containers a lot for work so it is not too unfamiliar. Container suits the need for the following reasons:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"abstracts the OS so only 1 OS needs to be considered\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"sharing files with different host OS is easy\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"available on most major OS\")), mdx(\"h1\", {\n    \"id\": \"challenges\"\n  }, \"Challenges\"), mdx(\"p\", null, \"It is not trivial to use container for development. First of all I need to access the tty of a container using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-it\"), \" flag. Then the development files need to be stored on the host for permanent storage using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-v\"), \" flag. Lastly flag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" is required to map the ports of the container and the host. Apart from these common setup, several unusual problems need to be solved.\"), mdx(\"p\", null, \"Basic knowledge of Linux configuration and commands are preassumed.\"), mdx(\"h2\", {\n    \"id\": \"podman\"\n  }, \"Podman\"), mdx(\"p\", null, \"Podman is a daemonless container runtime. It requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--security-opt label=disable\"), \" to bypass SELinux for sharing files with the host.\"), mdx(\"p\", null, \"Podman treats containers differently than Docker. Each plain container created by podman is not allocateda new IP as it would require root permission. To communicate 2 rootless containers, a pod is requried to contain the 2 containers. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/\"\n  }), \"official guide\"), \" tells how to setup pods and containers within pods. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.redhat.com/sysadmin/container-networking-podman\"\n  }), \"This guide\"), \" tells how to setup communication between containers in the same pod. However, the creation of pod requires pulling image from k8s.gcr.io, which is blocked by GFW. Thus a mirror registry must be used.\"), mdx(\"p\", null, \"According to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"man container-registries.conf\"), \", the system-wide configuration is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/containers/registries.conf\"), \". The location may differ on different platforms, check it carefully. In the default configuration shipped with CentOS 8, the format v1 is used. Mirrors are only available in format v2, therefore the configuration needs to be changed to v2:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"unqualified-search-registries = ['docker.io', 'registry.access.redhat.com', 'registry.fedoraproject.org', 'registry.centos.org']\\n\\n[[registry]]\\nprefix=\\\"k8s.gcr.io\\\"\\nlocation=\\\"k8s.gcr.io\\\"\\n\\n[[registry.mirror]]\\nlocation=\\\"registry.cn-hangzhou.aliyuncs.com/google_containers\\\"\\n\")), mdx(\"p\", null, \"Thanks to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containers/libpod/issues/5764\"\n  }), \"this issue\")), mdx(\"p\", null, \"After removing the old configuration and adding the above configuration, an AliCloud mirror is used. Now the pod can be created.\"), mdx(\"p\", null, \"The containers inside pods cannot communicate directly with host, namely port mapping. The port mapping needs to be set on the creation of the pods.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"podman pod create -p 30000:3000\\n\")), mdx(\"h2\", {\n    \"id\": \"keep-container-running\"\n  }, \"Keep Container Running\"), mdx(\"p\", null, \"A container will exit as soon as the PID 1 process exits. This is not a problem for stateless container run by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker run -it --rm\"), \". But on kubernetes, all containers has to be run in background and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubectl exec -it\"), \" to enter the interactive shell.\"), mdx(\"p\", null, \"To run a container in background indefinitely, several options are available:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tail -f /dev/null\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bash\"))), mdx(\"p\", null, \"The first option has a problem that it does not respond correctly to SIGKILL/SIGINT. Therefore the pod will be stuck in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Terminating\"), \" stage forever.\"), mdx(\"p\", null, \"The second option requires a pseudo-tty session to keep the bash from exiting.\"), mdx(\"p\", null, \"To conclude, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tail\"), \" approach has no elegant workaround for its problem, whereas the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bash\"), \" approach's problem can be fixed by simply providing a pseudo-tty session.\"), mdx(\"h2\", {\n    \"id\": \"reduce-image-size\"\n  }, \"Reduce Image Size\"), mdx(\"p\", null, \"The final image size mainly depends on the choice of the Linux distro. The traditional distros like CentOS is not optimized for containerization so the images based on it are inevitably bloated. My choice is Alpine 3. The image based on Alpine 3 weighs around 1.8 GB whereas the CentOS version weighs more than 3 GB.\"), mdx(\"h2\", {\n    \"id\": \"nofile-limit\"\n  }, \"NOFILE Limit\"), mdx(\"p\", null, \"When developing a frontend with plenty of source files and dependencies, the development server usually needs to watch all the changes in the source files. This sometimes exceeds the system's watch file limit.\"), mdx(\"p\", null, \"The watch file limit is defined by a hard limit and a soft limit. When the soft limit is exceeded, the user is warned. When the hard limit is hit, the watcher's process throws an error. Therefore both limits need to be raised.\"), mdx(\"p\", null, \"The solution is to increase the host's NOFILE limit. The containers automatically inherits the host's limit. \", mdx(LocalizedLink, {\n    to: '/post/ulimit',\n    mdxType: \"LocalizedLink\"\n  }, \"Check this\"), \" for the detailed setup.\"), mdx(\"h2\", {\n    \"id\": \"utf-8-encoding\"\n  }, \"UTF-8 Encoding\"), mdx(\"p\", null, \"As the base image is usually minimized for performance, the default encoding is set to ASCII. This won't be a problem if the host machine has UTF-8 enabled and that container interface directly displays the output as the encoded characters are passed straight to the host for decoding. However, it gets problematic when using tmux inside the container as tmux only passes the decoded character to the screen which it does not understand.\"), mdx(\"p\", null, \"The first step is the add special characters to the container. In my case, I added Simplified Chinese by installing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"glibc-langpack-zh\"), \". Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale -a\"), \" to check if the desired language has been installed.\"), mdx(\"p\", null, \"The last step is setting the default encoding to UTF-8 by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export LANG=\\\"zh_CN.UTF-8\\\"\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export LC_ALL=\\\"zh_CN.UTF-8\\\"\"), \" to bashrc.\"), mdx(\"h2\", {\n    \"id\": \"windows-10\"\n  }, \"Windows 10\"), mdx(\"p\", null, \"Docker was originally made for Linux. Running in on Windows is always troublesome. Here I records the main issues solved for Windows 10.\"), mdx(\"h3\", {\n    \"id\": \"docker-engine\"\n  }, \"Docker Engine\"), mdx(\"p\", null, \"At the time writing this sentence, Docker Desktop mainly provides 2 engines: HyperV(legacy) and WSL 2.\"), mdx(\"p\", null, \"HyperV works as a traditional VM hypervisor, which is utilized by Docker Desktop to maintain a VM where the docker daemon is run.\"), mdx(\"p\", null, \"WSL 2 on the other hand, provides a deeply integrated Linux kernel. This is a faster solution so I choose to use this engine.\"), mdx(\"p\", null, \"The first step is to install WSL 2. Check \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/windows/wsl/wsl2-install\"\n  }), \"this\"), \" for the official guide.\"), mdx(\"p\", null, \"Having WSL 2 installed, now check the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Use the WSL 2 based engine\"), \" option in the General settings of the Docker Desktop. Restart the docker daemon for this action to take effect. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: by restarting the daemon, all the images in the old daemon will be lost!\"), \".\"), mdx(\"p\", null, \"WSL 2 at this moment suffers from a fatal bug. If you try to start a Linux distro backed by WSL 2, and see the error message \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the attempted operation is not supported for the type of object referenced.\"), \", it means that WinSock has caused the WSL 2 to collapse. According to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/microsoft/WSL/issues/4177\"\n  }), \"this issue\"), \", running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"netsh winsock reset\"), \" as admin works around the bug once and for all.\"), mdx(\"h3\", {\n    \"id\": \"hyperv\"\n  }, \"HyperV\"), mdx(\"p\", null, \"No matter you choose HyperV or WSL 2 as the engine, HyperV service must be enabled. However, MicroSoft made a very bad default behaviour that disables virtualization in BIOS once the HyperV related services are enabled. Thus it is required to go to BIOS and enable hardware virtualization after enabling HyperV every time.\"), mdx(\"p\", null, \"Thanks to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://answers.microsoft.com/en-us/windows/forum/all/resolving-wslregisterdistribution-error-0x80370102/412cf42b-1424-444c-bb95-4aa2b5fe5eaf\"\n  }), \"this issue\")), mdx(\"h2\", {\n    \"id\": \"kubernetes\"\n  }, \"Kubernetes\"), mdx(\"p\", null, \"My production environment is kubernetes, local or cloud. Therefore it would be more convenient for me to setup a development environment that is consistent with the production environment.\"), mdx(\"p\", null, \"To run development environment in kubernetes, things are different.\"), mdx(\"h3\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"Setting up a kubernetes cluster is not as straightforward as running Docker Desktop. The official way to setup a development cluster is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://minikube.sigs.k8s.io/\"\n  }), \"minikube\"), \". But I choose to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kind.sigs.k8s.io/\"\n  }), \"kind\"), \" as it is more consistent across different platforms than \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://minikube.sigs.k8s.io/\"\n  }), \"minikube\"), \".\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kind.sigs.k8s.io/\"\n  }), \"kind\"), \" provides an official executable to manage the cluster. One can follow the official guides to install it.\"), mdx(\"p\", null, \"Based in China, Google services including the gcr registry is not available. Therefore a mirror registry must come to rescue. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kind.sigs.k8s.io/\"\n  }), \"kind\"), \" receives such configurations from a yaml file, just like how k8s receives configuration for a deployment. I have created \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/onichandame/docker-dev/blob/master/kube/cluster.yaml\"\n  }), \"a configuration file\"), \" for it.\"), mdx(\"p\", null, \"One thing to note here is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes.role.extraMounts\"), \" should be modified to map a directory on the host machine to the worker node, if persistent storage is desired.\"), mdx(\"p\", null, \"Having saved the configuration into cluster.yaml, one can boot up a cluster by running the command below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kind create cluster --config git/kube/cluster.yaml\\n\")), mdx(\"p\", null, \"The next step is to install ingress controller. From my experience it would be very inconvenient if services are exposed to different ports instead of a single port but different domains.\"), mdx(\"p\", null, \"According to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kind.sigs.k8s.io/docs/user/ingress/\"\n  }), \"official doc\"), \", one can choose an ingress controller from 3: Ambassador, Contour and Nginx. Based on my experiments, only the ambassador works well in China. To install the ambassador controller, run the following commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl apply -f https://github.com/datawire/ambassador-operator/releases/latest/download/ambassador-operator-crds.yaml\\nkubectl apply -n ambassador -f https://github.com/datawire/ambassador-operator/releases/latest/download/ambassador-operator-kind.yaml\\n\")), mdx(\"p\", null, \"After all the pods in the namespace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ambassador\"), \" are up, the controller is ready for use.\"), mdx(\"p\", null, \"Another concern is that all the ingresses using ambassador should be annotated by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/ingress.class: ambassador\"), \" so that the ambassador controller is notified to expose the annotated ingress.\"), mdx(\"p\", null, \"Another caveat currently not resolved is the that the coredns service may stop resolving domain names after the host being restarted. This can be worked around by restarting the coredns deployment on host restart.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl rollout restart deploy/coredns -n kube-system\\n\")), mdx(\"h1\", {\n    \"id\": \"implementation\"\n  }, \"Implementation\"), mdx(\"p\", null, \"The structure of the source project is as follows:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/image/container-development-structure.png\",\n    \"alt\": \"struc\"\n  }))), mdx(\"p\", null, \"The Dockerfile is the instruction to build the final image.\"), mdx(\"p\", null, \"The files folder contains all the configuration files like vimrc and bashrc.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/onichandame/docker-dev/\"\n  }), \"Check this\"), \" for the source files.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/repository/docker/onichandame/docker-dev\"\n  }), \"Check this\"), \" for the built image.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Thoughts","depth":1},{"value":"Challenges","depth":1},{"value":"Podman","depth":2},{"value":"Keep Container Running","depth":2},{"value":"Reduce Image Size","depth":2},{"value":"NOFILE Limit","depth":2},{"value":"UTF-8 Encoding","depth":2},{"value":"Windows 10","depth":2},{"value":"Docker Engine","depth":3},{"value":"HyperV","depth":3},{"value":"Kubernetes","depth":2},{"value":"Setup","depth":3},{"value":"Implementation","depth":1}]}},"pageContext":{"locale":"en","type":"post","title":"Use Container for Development","date":"2019-08-31T00:00:00.000Z","author":"onichandame"}}}